<?xml version="1.1" encoding="utf-8" ?>
<!-- This URDF was automatically created by SolidWorks to URDF Exporter! Originally created by Stephen Brawner (brawner@gmail.com) 
     Commit Version: 1.6.0-1-g15f4949  Build Version: 1.6.7594.29634
     For more information, please see http://wiki.ros.org/sw_urdf_exporter -->


<robot name="exo"
  xmlns:xacro="http://www.ros.org/wiki/xacro">

  <!-- Robot model name during runtime (above). Hard-code that robot name *and* 
    the namespace (in gazebo plugin at the bottom) to match. -->
  <xacro:property name="robot_name" value="exo" />

  <xacro:arg name="use_fake_hardware" default="false"/>

  <xacro:property name="_fake" value="$(arg use_fake_hardware)" />
  
  <!-- Grab the joint limits. -->
  <xacro:include filename="$(find exo_description)/urdf/lleap_exo_joint_limits.xacro" />
  <xacro:include filename="$(find exo_description)/urdf/exo_material_colors.xacro"/>
  <xacro:if value="${_fake}">
    <xacro:include filename="$(find exo_description)/urdf/lleap_exo.ros2_control.fake.xacro"/>
  </xacro:if>
  <xacro:unless value="${_fake}">
    <xacro:include filename="$(find exo_description)/urdf/lleap_exo.ros2_control.xacro"/>
  </xacro:unless>

  <!-- link names; 1-3 map to .STL filenames -->
  <xacro:property name="link0" value="hip_base" />  <!-- stationary inner part of hip joint -->
  <xacro:property name="link1" value="thigh" />
  <xacro:property name="link2" value="shank" />
  <xacro:property name="link3" value="foot" />

  <!-- simple geometry properties -->
  <xacro:property name="torso_width" value="0.5"/>   <!-- in meters -->

  <!-- repeated leg joint names -->
  <xacro:property name="joint0" value="pelvis" /> <!-- hip base to torso; fixed! -->
  <xacro:property name="joint1" value="hip" />    <!-- fixed to thigh -->
  <xacro:property name="joint2" value="knee" />   <!-- thigh to shank -->
  <xacro:property name="joint3" value="ankle" />  <!-- shank to foot -->


  <!-- Used for fixing robot to Gazebo 'base_link' -->
  <!-- https://classic.gazebosim.org/tutorials?tut=ros_urdf&cat=connect_ros
        "Rigidly Fixing A Model to the World" section
      "If you would like your URDF model to be permanently attached to 
        the world frame (the ground plane), you must create a "world" 
        link and a joint that fixes it to the base of your model." -->
  <!-- <link name="world"/> -->

  <!-- secure (fix) model in Gazebo: world <> link0 = fixed base_link = torso -->
  <!-- <joint name="global_fixed" type="fixed">
    <origin xyz="0 0 1" rpy="0 0 ${pi}" />
    <parent link="world"/>
    <child link="base_link"/>
  </joint> -->


  <!-- torso: base for the model; attached to world in gazebo if whole model fixed -->
  <link name="base_link">
    <visual>
      <origin xyz="0 0 0.5" rpy="0 0 0" />
      <!-- TODO: don't forget to add torso mass (and whole intertial element) here once have an estimate! -->
      <mass value="30" />
      <geometry>
        <box size="0.25 ${torso_width} 1"/>
      </geometry>
      <material name="red"/>
    </visual>
  </link>


  <!-- xacro macro for a leg (including Gazebo transmission elements). 
        'prefix' should designate the right and left legs.
        'reflect' should correspond to the right or left leg, 
          1 or -1 respectively, to reflect/shift the geometry. -->
  <xacro:macro name="leg" params="prefix reflect">

    <!-- fix stationary hip base to torso
      NOTE: this is a detail of the current solidworks model. The future simulation
      should simply have the thigh link attached directly to the torso at this location
      via the normal revolute joint currently attaching the thigh to the fixed hip_base.
      i.e., in future, the hip_base should not exist (simple geometry model) or be included
      in the base_link torso component (if more complicated goemetry is needed). -->
    <joint name="${prefix}_${joint0}_fixed_joint" type="fixed">
      <origin xyz="0.00012638 ${reflect * torso_width/2} -0.0003763" rpy="0 0 0" />
      <parent link="base_link"/>
      <child link="${prefix}_${link0}"/>
      <axis xyz="-0.0029081 -0.99996 0.0086592" />
      <!-- <limit lower="0" upper="2.5" effort="700" velocity="5" /> -->
    </joint>

    <!-- link0 should be the fixed hip base component.
          This exists only bc of the way current .STL models are.
          See above joint0 comment for future work. -->
    <link name="${prefix}_${link0}">
      <inertial>
        <origin xyz="-0.0281418142029674 0.084195220690108 0.0136945077855137" rpy="0 0 0" />
        <mass value="1.40107341049644" />
        <inertia ixx="0.0057559217437971" ixy="0.000406518233708888" ixz="0.00153929909288236" iyy="0.0114198233883461" iyz="-0.000159377837584594" izz="0.00876258360043916" />
      </inertial>
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <mesh filename="package://exo_description/meshes/${link0}.STL" />
        </geometry>
        <material name="dark_gray"/>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <mesh filename="package://exo_description/meshes/${link0}.STL" />
        </geometry>
      </collision>
    </link>

    <!-- hip joint: fixed hip base to thigh (link1) -->
    <joint name="${prefix}_${joint1}_revolute_joint" type="revolute">
      <!-- rpy (contrary to understanding), rotates red, blue, green which would be xzy, even though rpy = xyz.
            Theoretical rotation correspondance and order: https://answers.ros.org/question/114776/what-does-therpy-in-urdf-file-means/ -->
      <origin xyz="0.00012638 0.043454 -0.0003763" rpy="${pi / 2} ${pi / 2} ${pi}" />
      <parent link="${prefix}_${link0}" />
      <child link="${prefix}_${link1}" />
      <!-- <axis xyz="-0.0029081 -0.99996 0.0086592" /> -->
      <axis xyz="0 0 1" />
      <!-- Positional joint limits partially based on Tamar's msts (upper lim here). -->
      <limit lower="${hip_lower_radians}" upper="${hip_upper_radians}" effort="700" velocity="5" />
    </joint>

    <!-- link1 should be the thigh (joint1 to joint2).
          In our current STL model, contains the parts of the hip and knee joint visuals. -->
    <link name="${prefix}_${link1}">
      <inertial>
        <origin xyz="-0.404990833485201 0.00723950792302919 -0.0848264671155734" 
                rpy="${pi / 2} 0 ${-(180 - 12) * pi / 180}" />
        <mass value="2.27289407400542" />
        <inertia ixx="0.00167557501769417" ixy="-8.47541360240001E-06" ixz="-0.00126944670009916" iyy="0.00777922506609577" iyz="-2.94088009595002E-06" izz="0.00736726690967362" />
      </inertial>
      <visual>
        <!-- y part of rpy determined by measuring angles in screenshot -->
        <origin xyz="0 0 0" rpy="${pi / 2} 0 ${-(180 - 12) * pi / 180}" />
        <geometry>
          <mesh filename="package://exo_description/meshes/${link1}.STL" />
        </geometry>
        <material name="dark_gray"/>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="${pi / 2} 0 ${-(180 - 12) * pi / 180}" />
        <geometry>
          <mesh filename="package://exo_description/meshes/${link1}.STL" />
        </geometry>
      </collision>
    </link>

    <!-- knee joint: thigh (link1) to shank (link2)-->
    <joint name="${prefix}_${joint2}_revolute_joint" type="revolute">
      <!--<origin xyz="-0.63585 0.033681 -0.13506" rpy="0 0 0" />-->
      <origin xyz="0.649 0.001 0.03402" rpy="0 0 0" />
      <parent link="${prefix}_${link1}" />
      <child link="${prefix}_${link2}" />
      <!-- <axis xyz="0.007885 -0.99984 0.015892" /> -->
      <axis xyz="0 0 1" />
      <!-- Positional joint limits partially based on Tamar's msts (lower lim here). -->
      <limit lower="${knee_lower_radians}" upper="${knee_upper_radians}" effort="250" velocity="1.308" />
    </joint>

    <!-- link2 should be the shank (joint2 to joint3).
          In our current STL model, contains part of the knee joint visual. -->
    <link name="${prefix}_${link2}">
      <inertial>
        <origin xyz="-0.210873385399549 -0.0276710830621445 -0.140982468689507" 
                rpy="${pi / 2} 0 ${-(180 - 34) * pi / 180}" />
        <mass value="1.10275445439595" />
        <inertia ixx="0.00199044634689737" ixy="-7.54331572697175E-06" ixz="-0.00260077424938593" iyy="0.00581565190920448" iyz="-4.96554466328964E-06" izz="0.00412555905043524" />
      </inertial>
      <visual>
        <!-- y part of rpy again from digital screenshot measurement -->
        <origin xyz="0 0 0" rpy="${pi / 2} 0 ${-(180 - 34) * pi / 180}" />
        <geometry>
          <mesh filename="package://exo_description/meshes/${link2}.STL" />
        </geometry>
        <material name="dark_gray"/>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="${pi / 2} 0 ${-(180 - 34) * pi / 180}" />
        <geometry>
          <mesh filename="package://exo_description/meshes/${link2}.STL" />
        </geometry>
      </collision>
    </link>

    <!-- ADDING FOOT -->

    <!-- ankle joint: shank (link2) to foot ('link3') -->
    <joint name="${prefix}_${joint3}_revolute_joint" type="revolute">
      <origin xyz="${0.475 + 0.075} 0.003 -0.03" rpy="0 0 0" />
      <!-- TODO: once make simplified collisional geometries (dimensions based on SolidWorks models > ask design team), use those known dimensions to place the ankle joint origin at the bottom of the shank. Then use similar math (foot box dimensions) to place the foot link origin relative to the ankle joint origin. -->
      <parent link="${prefix}_${link2}" />
      <child link="${prefix}_${link3}" />
      <!-- <axis xyz="0.007885 -0.99984 0.015892" /> -->
      <axis xyz="0 0 1" />
      <!-- Positional joint limits NOT based on Tamar's msts, but normal ranges instead. -->
      <limit lower="${ankle_lower_radians}" upper="${ankle_upper_radians}" effort="250" velocity="1.308" />
    </joint>

    <!-- link3 should be the foot. -->
    <link name="${prefix}_${link3}">
      <inertial>
        <!-- TODO: probably need to change this interial element -->
        <!-- not quite sure what this is <origin xyz="-0.210873385399549 -0.0276710830621445 -0.140982468689507" rpy="0 0 0" /> -->
        <mass value="1.10275445439595" />
        <inertia ixx="0.00199044634689737" ixy="-7.54331572697175E-06" ixz="-0.00260077424938593" iyy="0.00581565190920448" iyz="-4.96554466328964E-06" izz="0.00412555905043524" />
      </inertial>
      <visual>
        <origin xyz="0 0.05 0" rpy="${pi / 2} 0 0" />
        <geometry>
          <box size="0.05 0.1 0.2"/>
        </geometry>
        <material name="red"/>
      </visual>
      <collision>
        <origin xyz="0 0.05 0" rpy="${pi / 2} 0 0" />
        <geometry>
          <box size="0.05 0.1 0.2"/>
        </geometry>
      </collision>
    </link>
  </xacro:macro>

  <!-- Legs actually created. -->
  <xacro:leg prefix="right" reflect="1" />
  <xacro:leg prefix="left" reflect="-1" />

  <!-- <xacro:include filename="$(find exo_description)/urdf/lleap_exo_gazebo.xacro" /> -->
  <!-- Needed gazebo_ros_control plugin. 
  <gazebo>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
  
  -->
      <!-- If not specified, the namespace defaults to the parent directory of this file. -->
      <!-- <robotNamespace>/${robot_name}</robotNamespace> -->
      <!-- Don't need to explicitly specify the *default* RobotHWSim, but left here to remind you can change it.
            This default only really provides hardware_interface::EffortJointInterface as the option for the 
            "output type" of joint controllers for ros_control. This is why they're currently specified as
            effort_controllers/XXX in the .yaml files, meaning the hardware_interface write() command (implemented 
            in this Default) send effort commands to the simulator. If we want to use position_controllers (i.e. 
            output position commands to the low-level motor control), we will have to implement our own RobotHWSim 
            with custom read() and write() functions that interface with Gazebo, much like how we will have to 
            write our own real RobotHW to read and write to physical microcontrollers. -->
      <!-- 
      <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
    </plugin>
  </gazebo>
  -->
</robot>


<!--
  TODO: consider reorganizing a bit to be more modularly structured like the UR robot arm URDFs.
  Don't need to be as modular bc only one robot (i.e., not ur3, ur5, etc) and less complex so far,
    but good to keep some things in mind as reference -> potential future changes to our model.
  - transmissions in separate file; macro for one leg's transmissions, prefix (usual) and 
      hw_interface as marco params
  - see the xacro:insert_clock use in the _robot. files
    https://answers.ros.org/question/358472/xacro-insert_block-parameter/
    any use for us?
  - also see creation and use of the xacro macro cylinder intertial.
    if we build our simple geom model as cylinders (looking like the UR arms tbh), can use something 
      similar to calc/create inertial blocks?
  - overall, just note which components (basic links and joints, transmissions, other gazebo
    components like intertials and plugins, macros, properties, etc)
  https://github.com/ros-industrial/universal_robot/blob/melodic-devel/ur_description/urdf/ur3.urdf.xacro
-->